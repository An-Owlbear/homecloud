// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: apps.sql

package persistence

import (
	"context"
	"database/sql"
)

const createApp = `-- name: CreateApp :exec
INSERT INTO apps (id, schema, date_added, client_id, client_secret, status)
VALUES (?1, jsonb(?2), unixepoch(), ?3, ?4, 'running')
`

type CreateAppParams struct {
	ID           string         `json:"id"`
	Schema       interface{}    `json:"schema"`
	ClientID     sql.NullString `json:"client_id"`
	ClientSecret sql.NullString `json:"client_secret"`
}

func (q *Queries) CreateApp(ctx context.Context, arg CreateAppParams) error {
	_, err := q.db.ExecContext(ctx, createApp,
		arg.ID,
		arg.Schema,
		arg.ClientID,
		arg.ClientSecret,
	)
	return err
}

const getAppOAuth = `-- name: GetAppOAuth :one
SELECT id, client_id, client_secret FROM apps
WHERE id = ?1
`

type GetAppOAuthRow struct {
	ID           string         `json:"id"`
	ClientID     sql.NullString `json:"client_id"`
	ClientSecret sql.NullString `json:"client_secret"`
}

func (q *Queries) GetAppOAuth(ctx context.Context, id string) (GetAppOAuthRow, error) {
	row := q.db.QueryRowContext(ctx, getAppOAuth, id)
	var i GetAppOAuthRow
	err := row.Scan(&i.ID, &i.ClientID, &i.ClientSecret)
	return i, err
}

const removeApp = `-- name: RemoveApp :execresult
DELETE FROM apps where id = ?
`

func (q *Queries) RemoveApp(ctx context.Context, id string) (sql.Result, error) {
	return q.db.ExecContext(ctx, removeApp, id)
}

const setStatus = `-- name: SetStatus :exec
UPDATE apps SET status = ?1
WHERE id = ?2
`

type SetStatusParams struct {
	Status string `json:"status"`
	ID     string `json:"id"`
}

func (q *Queries) SetStatus(ctx context.Context, arg SetStatusParams) error {
	_, err := q.db.ExecContext(ctx, setStatus, arg.Status, arg.ID)
	return err
}

const updateApp = `-- name: UpdateApp :exec
UPDATE apps SET schema = jsonb(?1)
WHERE id = ?2
`

type UpdateAppParams struct {
	Schema interface{} `json:"schema"`
	ID     string      `json:"id"`
}

func (q *Queries) UpdateApp(ctx context.Context, arg UpdateAppParams) error {
	_, err := q.db.ExecContext(ctx, updateApp, arg.Schema, arg.ID)
	return err
}

const getAppUnparsed = `-- name: getAppUnparsed :one
SELECT id, json(schema) as schema, date_added, status FROM apps
WHERE id = ?1
`

type getAppUnparsedRow struct {
	ID        string      `json:"id"`
	Schema    interface{} `json:"schema"`
	DateAdded int64       `json:"date_added"`
	Status    string      `json:"status"`
}

func (q *Queries) getAppUnparsed(ctx context.Context, id string) (getAppUnparsedRow, error) {
	row := q.db.QueryRowContext(ctx, getAppUnparsed, id)
	var i getAppUnparsedRow
	err := row.Scan(
		&i.ID,
		&i.Schema,
		&i.DateAdded,
		&i.Status,
	)
	return i, err
}

const getAppWithCredsUnparsed = `-- name: getAppWithCredsUnparsed :one
SELECT id, json(schema) as schema, date_added, client_id, client_secret, status from apps
WHERE id = ?1
`

type getAppWithCredsUnparsedRow struct {
	ID           string         `json:"id"`
	Schema       interface{}    `json:"schema"`
	DateAdded    int64          `json:"date_added"`
	ClientID     sql.NullString `json:"client_id"`
	ClientSecret sql.NullString `json:"client_secret"`
	Status       string         `json:"status"`
}

func (q *Queries) getAppWithCredsUnparsed(ctx context.Context, id string) (getAppWithCredsUnparsedRow, error) {
	row := q.db.QueryRowContext(ctx, getAppWithCredsUnparsed, id)
	var i getAppWithCredsUnparsedRow
	err := row.Scan(
		&i.ID,
		&i.Schema,
		&i.DateAdded,
		&i.ClientID,
		&i.ClientSecret,
		&i.Status,
	)
	return i, err
}

const getAppsUnparsed = `-- name: getAppsUnparsed :many
SELECT id, json(schema) as schema, date_added, status FROM apps
`

type getAppsUnparsedRow struct {
	ID        string      `json:"id"`
	Schema    interface{} `json:"schema"`
	DateAdded int64       `json:"date_added"`
	Status    string      `json:"status"`
}

func (q *Queries) getAppsUnparsed(ctx context.Context) ([]getAppsUnparsedRow, error) {
	rows, err := q.db.QueryContext(ctx, getAppsUnparsed)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []getAppsUnparsedRow
	for rows.Next() {
		var i getAppsUnparsedRow
		if err := rows.Scan(
			&i.ID,
			&i.Schema,
			&i.DateAdded,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAppsWithCredsUnparsed = `-- name: getAppsWithCredsUnparsed :many
SELECT id, json(schema) as schema, date_added, client_Id, client_secret, status from apps
`

type getAppsWithCredsUnparsedRow struct {
	ID           string         `json:"id"`
	Schema       interface{}    `json:"schema"`
	DateAdded    int64          `json:"date_added"`
	ClientID     sql.NullString `json:"client_id"`
	ClientSecret sql.NullString `json:"client_secret"`
	Status       string         `json:"status"`
}

func (q *Queries) getAppsWithCredsUnparsed(ctx context.Context) ([]getAppsWithCredsUnparsedRow, error) {
	rows, err := q.db.QueryContext(ctx, getAppsWithCredsUnparsed)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []getAppsWithCredsUnparsedRow
	for rows.Next() {
		var i getAppsWithCredsUnparsedRow
		if err := rows.Scan(
			&i.ID,
			&i.Schema,
			&i.DateAdded,
			&i.ClientID,
			&i.ClientSecret,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
